version: '3.8'

services:
  # PostgreSQL Metadata Database
  postgres:
    image: postgres:15-alpine
    container_name: dbsync-postgres
    environment:
      POSTGRES_DB: dbsync_metadata
      POSTGRES_USER: dbsync_user
      POSTGRES_PASSWORD: dbsync_pass
    ports:
      - "5432:5432"
    volumes:
      - ./deploy/volumes/postgres:/var/lib/postgresql/data
      - ./scripts/database:/docker-entrypoint-initdb.d
    networks:
      - dbsync-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dbsync_user -d dbsync_metadata"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: dbsync-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - ./deploy/volumes/redis:/data
    networks:
      - dbsync-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Zookeeper (Required by Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: dbsync-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - ./deploy/volumes/zookeeper/data:/var/lib/zookeeper/data
      - ./deploy/volumes/zookeeper/logs:/var/lib/zookeeper/log
    networks:
      - dbsync-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: dbsync-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - ./deploy/volumes/kafka:/var/lib/kafka/data
    networks:
      - dbsync-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Kafka Connect
  kafka-connect:
    image: debezium/connect:2.5
    container_name: dbsync-kafka-connect
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: db-sync-connect-cluster
      CONFIG_STORAGE_TOPIC: db-sync-connect-configs
      OFFSET_STORAGE_TOPIC: db-sync-connect-offsets
      STATUS_STORAGE_TOPIC: db-sync-connect-status
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
    networks:
      - dbsync-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: dbsync-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deploy/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./deploy/volumes/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - dbsync-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: dbsync-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - ./deploy/volumes/grafana:/var/lib/grafana
    networks:
      - dbsync-network
    depends_on:
      - prometheus

networks:
  dbsync-network:
    driver: bridge
